---
import { Image } from 'astro:assets';

interface GalleryItem {
  src: any;
  alt: string;
  width?: number;
  height?: number;
}

interface Props {
  gallery?: GalleryItem[];
  thumbnailSize?: number;
}

const { gallery = [], thumbnailSize = 300 } = Astro.props;
---

<div class="gallery-container">
  <div class="gallery-grid">
    {
      gallery.length > 0 ? (
        gallery.map((image, index) => {
          const aspectRatio = image.src.width / image.src.height;
          return (
            <div class="gallery-item" data-index={index}>
              <div class="image-wrapper">
                <Image
                  src={image.src}
                  alt={image.alt}
                  width={thumbnailSize}
                  height={Math.round(thumbnailSize / aspectRatio)}
                  quality={60}
                  loading="lazy"
                  class="thumbnail"
                  data-original-src={image.src.src}
                  data-original-width={image.src.width}
                  data-original-height={image.src.height}
                />
              </div>
            </div>
          );
        })
      ) : (
        <p class="empty-message">No images available</p>
      )
    }
  </div>

  <div id="lightbox" class="lightbox">
    <button type="button" class="close-btn">&times;</button>
    <button type="button" class="nav-btn prev-btn">&larr;</button>
    <div class="lightbox-content">
      <img id="lightbox-image" src="" alt="" loading="eager" />
      <div id="lightbox-caption" class="caption"></div>
    </div>
    <button type="button" class="nav-btn next-btn">&rarr;</button>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const galleryItems = document.querySelectorAll('.gallery-item');
    const lightbox = document.getElementById('lightbox');
    const lightboxImg = document.getElementById('lightbox-image');
    const caption = document.getElementById('lightbox-caption');
    const closeBtn = document.querySelector('.close-btn');
    const prevBtn = document.querySelector('.prev-btn');
    const nextBtn = document.querySelector('.next-btn');
    const lightboxContent = document.querySelector('.lightbox-content');

    const galleryImages = Array.from(galleryItems).map((item) => {
      const img = item.querySelector('img');
      return {
        url: img.dataset.originalSrc,
        alt: img.alt,
        width: img.dataset.originalWidth,
        height: img.dataset.originalHeight,
      };
    });

    let currentIndex = 0;

    if (
      galleryItems.length &&
      lightbox &&
      lightboxImg &&
      caption &&
      lightboxContent
    ) {
      galleryItems.forEach((item, index) => {
        item.addEventListener('click', () => openLightbox(index));
      });

      function openLightbox(index) {
        currentIndex = Math.max(0, Math.min(index, galleryImages.length - 1));
        const image = galleryImages[currentIndex];

        lightboxImg.src = image.url;
        lightboxImg.alt = image.alt;
        lightboxImg.onload = function () {
          this.style.width = '';
          this.style.height = '';
          this.style.maxWidth = '90vw';
          this.style.maxHeight = '90vh';
        };
        caption.textContent = image.alt;
        lightbox.style.display = 'flex';
        document.body.style.overflow = 'hidden';
      }

      function closeLightbox() {
        lightbox.style.display = 'none';
        document.body.style.overflow = 'auto';
      }

      function navigate(direction) {
        currentIndex =
          (currentIndex + direction + galleryImages.length) %
          galleryImages.length;
        openLightbox(currentIndex);
      }

      lightbox.addEventListener('click', (e) => {
        if (!lightboxContent.contains(e.target)) {
          closeLightbox();
        }
      });

      if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
      if (prevBtn)
        prevBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          navigate(-1);
        });
      if (nextBtn)
        nextBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          navigate(1);
        });

      document.addEventListener('keydown', (e) => {
        if (lightbox.style.display !== 'flex') return;
        if (e.key === 'Escape') closeLightbox();
        if (e.key === 'ArrowLeft') navigate(-1);
        if (e.key === 'ArrowRight') navigate(1);
      });
    }
  });
</script>

<style>
  .gallery-container {
    width: 100%;
    padding: 1rem;
    box-sizing: border-box;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
    margin: 1rem 0;
  }

  .gallery-item {
    cursor: pointer;
    transition: transform 0.2s ease;
    aspect-ratio: 1;
    height: 100%;
  }

  .gallery-item:hover {
    transform: scale(1.02);
  }

  .image-wrapper {
    width: 100%;
    height: 100%;
    overflow: hidden;
    border-radius: 8px;
    background: #f5f5f5;
  }

  .thumbnail {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .gallery-item:hover .thumbnail {
    transform: scale(1.05);
  }

  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .lightbox-content {
    position: relative;
    text-align: center;
  }

  #lightbox-image {
    max-width: 90vw;
    max-height: 90vh;
    width: auto;
    height: auto;
    object-fit: contain;
  }

  .caption {
    color: white;
    margin-top: 1rem;
    padding: 0.5rem;
  }

  .close-btn,
  .nav-btn {
    position: absolute;
    color: white;
    background: rgba(0, 0, 0, 0.5);
    border: none;
    font-size: 2rem;
    cursor: pointer;
    padding: 0 1rem;
    z-index: 1001;
  }

  .close-btn {
    top: 20px;
    right: 20px;
  }

  .nav-btn {
    top: 50%;
    transform: translateY(-50%);
  }

  .prev-btn {
    left: 20px;
  }

  .next-btn {
    right: 20px;
  }

  @media (max-width: 768px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 1rem;
    }

    .nav-btn {
      font-size: 1.5rem;
      padding: 0.5rem;
    }

    .close-btn {
      top: 10px;
      right: 10px;
      font-size: 1.8rem;
    }
  }
</style>
