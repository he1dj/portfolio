---
import type { CollectionEntry } from 'astro:content';
import BaseLayout from './BaseLayout.astro';
import { Image } from 'astro:assets';

export type ProjectDetail = CollectionEntry<'projects'>['data'];
interface Props {
  project: ProjectDetail;
}
const { project } = Astro.props;
const title = `${project.title} | Beknur Saktanbekov`;
---

<BaseLayout pageTitle={title}>
  <main class="project-detail">
    <header class="project-header">
      <div class="container">
        <h1 class="project-title">{project.title}</h1>

        <div class="project-meta">
          {
            project.image && (
              <figure class="post-image">
                <Image
                  src={project.image.url}
                  alt={project.image.alt || project.title}
                  width={800}
                  height={400}
                />
                {project.image.alt && (
                  <figcaption>{project.image.alt}</figcaption>
                )}
              </figure>
            )
          }
          <time datetime={project.date.toISOString()} class="project-date">
            {
              project.date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })
            }
          </time>

          {
            project.tech && (
              <ul class="tech-stack">
                {project.tech.map((tech) => (
                  <li class="tech-item">{tech}</li>
                ))}
              </ul>
            )
          }
        </div>

        <div class="project-actions">
          {
            project.github && (
              <a
                href={project.github}
                class="action-button"
                target="_blank"
                rel="noopener noreferrer"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22" />
                </svg>
                View Code
              </a>
            )
          }
          {
            project.liveUrl && (
              <a
                href={project.liveUrl}
                class="action-button primary"
                target="_blank"
                rel="noopener noreferrer"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <circle cx="12" cy="12" r="10" />
                  <line x1="12" y1="8" x2="12" y2="12" />
                  <line x1="12" y1="16" x2="12.01" y2="16" />
                </svg>
                Live Demo
              </a>
            )
          }
        </div>
      </div>
    </header>

    <div class="container">
      <slot />
    </div>
  </main>
</BaseLayout>

<style is:global>
  .project-detail {
    padding: 2rem 0 4rem;
  }

  .project-header {
    background: var(--gradient-accent);
    color: white;
    padding: 3rem 0;
    margin-bottom: 3rem;
  }

  .project-title {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    line-height: 1.2;
  }

  .project-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    align-items: center;
    margin-bottom: 2rem;
    color: rgba(255, 255, 255, 0.9);
  }

  .project-date {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .tech-stack {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .tech-item {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.25rem 0.75rem;
    border-radius: 999px;
    font-size: 0.9rem;
  }

  .project-actions {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .action-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.2s ease;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .action-button:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
  }

  .action-button.primary {
    background: var(--primary-color);
    color: var(--color-primary);
  }
  .action-button svg {
    width: 1.25rem;
    height: 1.25rem;
  }

  .container {
    width: 100%;
    max-width: 900px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  /* Project content styles */
  .project-body {
    line-height: 1.7;
    color: var(--color-text);
  }

  .project-body h2 {
    font-size: 1.75rem;
    margin: 2.5rem 0 1rem;
    color: var(--color-heading);
  }

  .project-body h3 {
    font-size: 1.5rem;
    margin: 2rem 0 1rem;
  }

  .project-body p {
    margin-bottom: 1.5rem;
  }

  .project-body a {
    color: var(--color-primary);
    text-decoration: underline;
  }

  .project-body pre {
    background: var(--color-code-bg);
    padding: 1.25rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .project-body code {
    font-family: var(--font-mono);
    font-size: 0.9rem;
  }

  @media (max-width: 768px) {
    .project-title {
      font-size: 2rem;
    }

    .project-header {
      padding: 2rem 0;
    }

    .container {
      padding: 0 1rem;
    }
  }
</style>
